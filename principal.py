# -*- coding: utf-8 -*-
"""dener.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e2SgLnGLbhg-na3gDVnktbgmIrxySa8B
"""
print('Abrindo arquivos...')
gmata = [ linha.strip().split('\t') for linha in open("TABELA.TRI.ENCONTRADO.GMATA.csv").readlines()   ]

misa = [ linha.strip().split('\t') for linha in open("TABELA.TRI.ENCONTRADO.MISA.csv").readlines()   ]

#repet = [ linha.strip().split('\t') for linha in open("TABELA.TRI.ENCONTRADO.REPET.csv").readlines()   ]

def verificaSobreposicao(gmata, misa):
    
    posicoes = sorted(set([int(x) for x in ','.join([x[0]+','+x[1] for x in gmata+misa]).split(',')]))
    posicoes = ', ,'.join([str(x) for x in  posicoes]).split(",")
    
    for i in range(1, len(posicoes), 2):
        s = int(posicoes[i-1])
        e = int(posicoes[i+1])
        sp_g = [x for x in gmata if (int(x[0]) >= s and int(x[1]) <= e) or (int(x[0]) <= s and int(x[1]) >= e)]
        sp_m = [x for x in misa if (int(x[0]) >= s and int(x[1]) <= e) or (int(x[0]) <= s and int(x[1]) >= e)]
        
        if len(sp_g) > 0:
            posicoes[i] += 'G '
        if len(sp_m) > 0:
            posicoes[i] += 'M '
        if len(sp_g) + len(sp_m) < 1:
             posicoes[i] = '-'
    return [[int(x[0]), int(x[-1]), ''.join(set([z for z in x if not z.isdigit()]))] for x in [x.split(' ') for x in  ''.join(posicoes).split('-')]]

resultado = {}

print('Juntando tabelas...')
#JUNTAR AS 3 TABELAS
for scaffold in sorted(set([x[0] for x in gmata] + [x[0] for x in misa])):
    resultado[scaffold] = {}
    scaffoldgmata = [x[1:] for x in gmata if x[0]==scaffold]
    scaffoldmisa = [x[1:] for x in misa if x[0]==scaffold]
    novamisa = [x[2] for x in scaffoldmisa] if len(scaffoldmisa) > 0 else []
    novagmata = [x[2] for x in scaffoldgmata] if len(scaffoldgmata) > 0 else []
    juntas = set(novagmata + novamisa)
    for tri in juntas:
        resultado[scaffold][tri] = []
        trigmata = [x for x in scaffoldgmata if x[2]==tri]
        trimisa = [x for x in scaffoldmisa if x[2]==tri]
        resultado[scaffold][tri] = verificaSobreposicao(trigmata, trimisa)

print('Salvando tabelas...')
#ESCREVER AS 3 TABELAS JUNTAS
with open('all_tables.tsv', 'w') as o:
    for scaffold, tris in resultado.items():
        for tri, poss in tris.items():
            for pos in poss:
                o.write("%s\t%s\t%d\t%d\t%s\t%d\n" % (scaffold, tri, pos[0], pos[1], pos[2], pos[1]-pos[0]+1))

print('Abrindo as tabelas juntas')
tabela = [ linha.strip().split('\t') for linha in open("all_tables.tsv").readlines()   ]

def abundancia(vetor):
    print('Por tamanhomaior')
    for x in sorted({
        x: sum([int(y[-1]) for y in vetor if y[1] == x]) for x in set([z[1] for z in vetor])}.items(), key=lambda x: -x[1])[:10]:
        print(x[0], x[1])
    print('\nPor quantidademaior')
    for x in sorted({
        x: len([int(y[-1]) for y in vetor if y[1] == x]) for x in set([z[1] for z in vetor])}.items(), key=lambda x: -x[1])[:10]:
        print(x[0], x[1])

def abundanciamenor(vetor):
    print('Por tamanho menor')
    for x in sorted({
        x: sum([int(y[-1]) for y in vetor if y[1] == x]) for x in set([z[1] for z in vetor])}.items(), key=lambda x: -x[1])[-10:]:
        print(x[0], x[1])
    print('\nPor quantidade menor')
    for x in sorted({
        x: len([int(y[-1]) for y in vetor if y[1] == x]) for x in set([z[1] for z in vetor])}.items(), key=lambda x: -x[1])[-10:]:
        print(x[0], x[1])

abundancia(tabela)

abundanciamenor(tabela)

gff = [ linha.strip().split('\t') for linha in open("Pguajava.introns.gff3").readlines()   ][1:]

def getAbund(tbl, gff3, feat):
    fs = [x for x in gff3 if x[2] == feat]
    abundancia(getTabelafiltrada(tbl, fs))
def getAbundmenor(tbl, gff3, feat):
    fs = [x for x in gff3 if x[2] == feat]
    abundanciamenor(getTabelafiltrada(tbl, fs))
def getTabelafiltrada(tb, gffFiltrado):
    emCDS = []
    perc = 0
    cont = 0
    tam = len(tabela)
    for scaffold in set([x[0] for x in tb]):
        tbS = [x for x in tb if x[0] == scaffold]
        gffS = [x for x in gffFiltrado if x[0] == scaffold]
        for x in tbS:
            for c in gffS:
                i = int(x[2])
                f = int(x[3])
                s = int(c[3])
                e = int(c[4])
                if (i >=s and i <= e ) or (f >= s and f <= e): ### AQUI ACHA A LINHA dA TABELA NO CDS
                    emCDS.append(x)
            cont += 1
            p = int(cont *100 / tam )
            if p != perc:
                perc = p
                print('%d%%' % p if p % 10 == 0 else '.', end=   '' if p % 25 > 0 else '\n')
    return emCDS

getAbund(tabela, gff, 'CDS')

getAbundmenor(tabela, gff, 'CDS')

with open('tabela_final_2.tsv', 'w') as o:
    perc = 0
    cont = 0
    tam = len(tabela)
    for linha in tabela:
        s = int(linha[2])
        e = int(linha[2])
        feats = set([x[2] for x in gff if x[0] == linha[0] and ( (s >= int(x[3]) and s <= int(x[4])) or  (e >= int(x[3]) and e <=  int(x[4]) )) ])
        feats_genes = set([x[-1].replace("ID=","") for x in gff if
                     x[2] == "gene" and x[0] == linha[0] and ((s >= int(x[3]) and s <= int(x[4])) or (e >= int(x[3]) and e <= int(x[4])))])
        o.write('\t'.join(linha) + '\t' + ''.join([x[0].upper() for x in feats]) + '\t' + ','.join(feats_genes) + '\n')
        cont += 1
        p = int(cont *100 / tam )
        if p != perc:
            perc = p
            print('%d%%' % p if p % 10 == 0 else '.', end=   '' if p % 25 > 0 else '\n')

